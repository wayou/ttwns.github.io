// Math
// ====


@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b != 0) {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}

@function pow($base, $exponent, $prec: 12) {
  // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
  @if (floor($exponent) != $exponent) {
    $prec2 : pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nthRoot(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
  }

  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}

@function nthRoot($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;

  @for $i from 0 through $prec {
    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
  }

  @return $x;
}


// Remove the unit
@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

@function convert-keywords-to-angles($value) {
		   @if ($value == 'to top') or
		   	   ($value == 'bottom') {
		   	    @return 0deg;
	} @else if ($value == 'to top right') or
    		   ($value == 'to right top') or
    		   ($value == 'bottom left') or
    		   ($value == 'left bottom') {
			    @return 45deg;
	} @else if ($value == 'to right') or
			   ($value == 'left') {
			   	@return 90deg;
	} @else if ($value == 'to bottom right') or
    		   ($value == 'to right bottom') or
    		   ($value == 'top left') or
    		   ($value == 'left top') {
    			@return 135deg;
    } @else if ($value == 'to bottom') or
    		   ($value == 'top') {
    		   	@return 180deg;
    } @else if ($value == 'to bottom left') or
			   ($value == 'to left bottom') or
			   ($value == 'top right') or
			   ($value == 'right top') {
    			@return 225deg;
    } @else if ($value == 'to left') or
    		   ($value == 'right') {
    		   	@return 270deg;
    } @else if ($value == 'to top left') or
    		   ($value == 'to left top') or
    		   ($value == 'bottom right') or
    		   ($value == 'right bottom') {
    		    @return 315deg;
    } @else {
    			@warn 'Unknown direction keyword';
    			@return null;
    }
}


// Color contrast calculator
// =========================
// From https://gist.github.com/voxpelli/6304812
// Can be useful when eg. generating colored buttons from a single supplied color
// as you can then check which out of a couple of text colors would give the best contrast
// Lacks the support for alpha-transparency
//
// Normal usage: `color: pick_best_color(#f00, (#fff, #ccc, #666));`
@function color-luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;

    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

@function color-contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + .05;
  $luminance2: color-luminance($color2) + .05;
  $ratio: $luminance1 / $luminance2;

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  $ratio: round($ratio * 10) / 10;

  @return $ratio;
}

@function pick-best-color($base, $colors, $tolerance: 0) {
  $contrast: color-contrast($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current_contrast: color-contrast($base, nth($colors, $i));
    @if ($current_contrast - $contrast > $tolerance) {
      $contrast: color-contrast($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }

  @if ($contrast < 3) {
    @warn "Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}";
  }

  @return $best;
}

// Simple text color switcher based on background color lightness
@function dark-or-light($color) {
    @if (lightness($color) > 50) {
        @return $text-color; // dark on light
        } @else {
            @return $white; // light on dark
    }
}
