// scss-lint:disable VendorPrefix
@import 'variables';
@import 'functions';

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    filter: alpha(opacity=($opacity * 100));
}

// Rem/px converter
// ----------------
// Convert `rem` to `px` and provide pixel font size fallback for IE8
// Features:
//  1. Accepts (almost) any property as an input, not only `font-size`
//  2. Accepts multiple values, like 10px 20px
//
// Note:
// Define `$font-size-base-old-ie` in pixels first in your variables
//
// Source: http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
    $px : ();
    $rem: ();
    $old-ie: false !default;
    $font-size-base-old-ie: 16px !default;

    @each $value in $values {

        @if $value == 0 or $value == auto {
            $px : append($px , $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value);
            $val: parse-int($value);

            @if $unit == 'rem' {
                $px : append($px, ($val * parse-int($font-size-base-old-ie) + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
        @if $old-ie {
            #{$property}: $px;
        } @else {
            #{$property}: $rem;
        }
    }
}

// Smooth (antialiase) font on Mac OS X
// ------------------------------------
// Try not to use it on everything.
// Best Use cases:
//   1. light text on dark backgrounds
//   2. fix web font (esp. icon fonts) rendering
@mixin font-smoothing($value: on) {
    @if $value == on {
        -moz-osx-font-smoothing: grayscale; // Firefox 25+
        -webkit-font-smoothing: antialiased;
    } @else {
        -moz-osx-font-smoothing: auto; // Firefox 25+
        -webkit-font-smoothing: subpixel-antialiased;
    }
}

// Linear gradient
// ---------------
// Specify gradient direction either using angles or keywords (old or new syntax)
// Keywords which contain more than 1 word need quotes around.
// e.g. `@include gradient-directional(#fff, #999, "to right");`
//
// The `convert-keywords-to-angles()` function is used to fix the issue that
// the gradient angle of prefixed middle syntax differs from that of the unprefixed new syntax.
// Ref: http://www.quirksmode.org/css/images/angles.html
@mixin gradient-directional($start-color: $gray, $end-color: $gray-dark, $stddeg: 45deg) {
    @if type-of($stddeg) != number {
        $stddeg: convert-keywords-to-angles($stddeg);
    }

    $deg: 90deg - $stddeg;
    background-image: -webkit-linear-gradient($deg, $start-color, $end-color);
    background-image: -o-linear-gradient($deg, $start-color, $end-color);
    background-image: linear-gradient($stddeg, $start-color, $end-color);
    background-repeat: repeat-x;
}

// SVG background images with PNG fallback
// ---------------------------------------
// Dependencies:
//  1. Modernizr
//  2. one PNG fallback image
@mixin background-image($name) {
    $image-path: '../img' !default;
    $fallback-extension: 'png' !default;

    background-image: url(#{$image-path}/#{$name}.svg);

    .no-svg & {
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});
    }
}

// Media query
// -----------
// Only for `min-width` & `max-width` browser window media queries
// Fallbacks are provided for old desktop browsers (IE8-) which don't support media query
// To give them the desktop look while maintaining mobile-first
// Note:
//  1. Old IE needs another stylesheet like:
//     `<!--[if lt IE 9]><link rel="stylesheet" href="css/old-ie.css"><![endif]-->`
//  2. Define breakpoints in variables using SASS maps
//  3. Declare the screen width you want old IE to display in `fix-queries-at` in `px`
// Ref:
//  http://www.sitepoint.com/managing-responsive-breakpoints-sass/
//  http://jakearchibald.github.io/sass-ie/
@mixin at-least($screen-width) {
    @if $old-ie {
        @if $fix-queries-at >= (parse-int(map-get($breakpoints, $screen-width)) * 1px) {
            @content;
        }
    } @else {
        // If the key exists in the map
        @if map-has-key($breakpoints, $screen-width) {
            // Prints a media query based on the value
            @media only screen and (min-width: map-get($breakpoints, $screen-width)) {
                @content;
            }
        } @else {
            @warn 'Unfortunately, no value could be retrieved from `#{$screen-width}`. '
                + 'Please make sure it is defined in `$breakpoints` map.';
        }
    }
}

@mixin between($screen-width-min, $screen-width-max) {
    @if map-has-key($breakpoints, $screen-width-min) and map-has-key($breakpoints, $screen-width-max) {
        @media only screen (min-width: map-get($breakpoints, $screen-width-min)) and (max-width: map-get($breakpoints, $screen-width-max)) {
            @content;
        }
    } @else {
        @warn 'Unfortunately, no value could be retrieved from `#{$screen-width-min}` or `#{$screen-width-max}`. '
            + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

@mixin until($screen-width) {
    @if map-has-key($breakpoints, $screen-width) {
        @media only screen and (max-width: map-get($breakpoints, $screen-width)) {
            @content;
        }
    } @else {
        @warn 'Unfortunately, no value could be retrieved from `#{$screen-width}`. '
            + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

// Media query target retina display
// ---------------------------------
// Default ration captures(https://gist.github.com/marcedwards/3446599):
// * Retina iOS devices
// * Retina Macs running Safari
// * High DPI Windows PCs running IE 8 and above
// * Low DPI Windows PCs running IE, zoomed in
// * Low DPI Windows PCs and Macs running Firefox, zoomed in
// * Android hdpi devices and above
// * Android tvdpi devices, including Google Nexus 7
// * Chrome running on high DPI Macs and PCs
// * Opera running on high DPI Macs, PCs and mobile devices
//
// For futurestics: $ratio = 2
// Source: http://css-tricks.com/snippets/css/retina-display-media-query/
@mixin hidpi($ratio: 1.3) {
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
           only screen and (min--moz-device-pixel-ratio: $ratio),
           only screen and (-o-min-device-pixel-ratio: #{$ratio} / 1),
           only screen and (min-device-pixel-ratio: $ratio),
           only screen and (min-resolution: round($ratio) * 96dpi),
           only screen and (min-resolution: $ratio * 1dppx) {
        @content;
    }
}

